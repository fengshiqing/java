<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
						   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
						   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
						   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
                           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">

    <!--读取 properties 配置文件-->
    <context:property-placeholder location="classpath:*.properties"/>

    <!-- 自动扫描该包，SpringMVC会将包下用了@controller、@Component等注解的类加入到IoC容器中。 -->
    <context:component-scan base-package="com.kunning.web.controller"/>
    <context:component-scan base-package="com.kunning.web.service"/>
    <context:component-scan base-package="com.kunning.web.timerTask"/>

    <!--配置AOP，开启 @Aspect，使用CGLIB自动创建代理Bean -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 定时任务 -->
    <task:annotation-driven/>

    <!-- 允许直接访问静态资源 -->
    <mvc:annotation-driven/>
    <mvc:resources location="/app/" mapping="/app/**"/><!-- 根目录是WebContent -->
    <!-- <mvc:resources mapping="/styles/**" location="/WEB-INF/resource/styles/"/> -->
    <!-- <mvc:resources location="/img/" mapping="/img/**"/>
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/css/" mapping="/css/**"/> -->


    <!-- Spring中引入其他配置文件。为了配置文件的模块化，可以将不同功能的配置分为多个配置文件。 -->
    <!-- <import resource="classpath:spring-mybatis.xml" /> -->


    <!-- Spring整合mybatis。这里面也没多少行配置，主要的就是 自动扫描，自动注入，配置数据库。具体详情请参阅官网文档：http://www.mybatis.org/spring/zh/index.html -->
    <!-- 引入数据库配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/><!-- 引入jdbc.properties中的配置信息 -->
    </bean>
    <!-- 数据源：数据库连接信息 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- 从数据库配置文件中读取配置 -->
        <property name="driverClassName" value="${driver}"/><!-- 驱动 -->
        <property name="url" value="${url}"/><!-- url -->
        <property name="username" value="${username}"/><!-- 用户名 -->
        <property name="password" value="${password}"/><!-- 密码 -->

        <property name="initialSize" value="${initialSize}"/><!-- 初始化连接大小 -->
        <property name="maxActive" value="${maxActive}"/><!-- 连接池最大数量 -->
        <property name="maxIdle" value="${maxIdle}"/><!-- 连接池最大空闲数 -->
        <property name="minIdle" value="${minIdle}"/><!-- 连接池最小空闲数 -->
        <property name="maxWait" value="${maxWait}"/><!-- 获取连接最大等待时间 -->
    </bean>

    <!-- Spring 整合 MyBatis时，就不再需要mybatis的配置映射文件了。
            要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：
            一个 SqlSessionFactory 和 至少一个数据映射器类。
            在 MyBatis-Spring 中，SqlSessionFactoryBean 是用于创建 SqlSessionFactory 的。SqlSessionFactoryBean的配置如下： -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/><!-- SqlSessionFactory 需要一个 DataSource(数据源)，可以是任意的 DataSource。 -->
        <!--property name="configLocation" value="classpath:conf/mybatis.xml" /--><!-- 可以添加mybatis配置文件 -->
        <!-- 从类路径下加载 sqlMap 包及其子包下所有的映射器 XML文件 -->
        <property name="mapperLocations" value="classpath:sqlMap/UserSqlMap.xml"/><!-- 有多个包的话可以用英文逗号分隔开 -->
        <!-- property name="mapperLocations">自动扫描多个目录下的映射XML文件可以这么写
            <list>
                <value>classpath*:conf/sqlMap/sqlMap_*.xml</value>
                <value>classpath*:conf/sqlMap/fb/**/sqlMap_*.xml</value>
            </list>
        </property-->
    </bean>

    <!-- Dao层接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.kunning.web.dao"/><!-- 自动扫描包下的dao类 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置 Spring 的JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 要开启Spring的事务处理，在Spring的XML配置文件中简单创建一个 DataSourceTransactionManager 对象即可。
    注意，事务管理器的 DataSource 必须和 SqlSessionFactoryBean 的是同一个数据源，否则事务管理器无法工作。 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <!-- <constructor-arg ref="dataSource" /> --><!-- 这种方式也行 -->
    </bean>
    <!--支持事务注解 -->
    <!--    <tx:annotation-driven transaction-manager="transactionManager"/>--><!-- 默认属性的名字就是“transactionManager”，只有不是“transactionManager”时，才需要配置 -->
    <tx:annotation-driven/>


    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <!--
    SpringMVC 中，文件的上传，是通过 MultipartResolver 实现的。 所以，如果要实现文件的上传，只要在 spring-mvc.xml 中注册相应的 MultipartResolver 即可。

MultipartResolver 的实现类有两个：
    CommonsMultipartResolver
    StandardServletMultipartResolver

两个的区别：
    第一个需要使用 Apache 的 commons-fileupload 等 jar 包支持，但它能在比较旧的 servlet 版本中使用。
    第二个不需要第三方 jar 包支持，它使用 servlet 内置的上传功能，但是只能在 Servlet 3 以上的版本使用。

第一个使用步骤：
/*CommonsMultipartResolver  上传用到的两个包*/
"commons-fileupload:commons-fileupload:1.3.1",
"commons-io:commons-io:2.4"
     -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/><!-- 默认编码 -->
        <property name="maxUploadSize" value="10485760"/><!-- 文件最大10*1024*1024=10MB -->
        <property name="maxInMemorySize" value="40960"/><!-- 内存中的最大值：40KB -->
    </bean>

    <!--配置线程池-->
    <bean id="springThreadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="10"/><!-- 线程池维护线程的最少数量 -->
        <property name="keepAliveSeconds" value="200"/><!-- 允许的空闲时间 -->
        <property name="maxPoolSize" value="100"/><!-- 线程池维护线程的最大数量 -->
        <property name="queueCapacity" value="100"/><!-- 缓存队列 -->
        <!-- 对拒绝task的处理策略 -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>

    <!-- quartz定时任务 job -->
    <bean id="quartz_1" class="com.kunning.web.timerTask.Quartz_1"/>
    <!-- 使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法-->
    <!-- jobDetail -->
    <bean id="job_1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="quartz_1"/>
        <property name="targetMethod" value="task_1"/>
        <!--false表示等上一个任务执行完后再开启新的任务,这里和上一遍博客中的注解@DisallowConcurrentExecution一个道理-->
        <property name="concurrent" value="false"/>
    </bean>
    <!-- Trigger-->
    <bean id="oceanStatusCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="job_1"/>
        <property name="cronExpression" value="0 0/1 * * * ?"/>
    </bean>
    <!--Scheduler -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="oceanStatusCronTrigger"/>
            </list>
        </property>
    </bean>

    <import resource="spring-mvc-mq.xml"/>
</beans>
