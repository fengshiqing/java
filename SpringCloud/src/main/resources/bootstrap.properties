server.port=9090

spring.application.name=CloudApplication

# \u8BE6\u89E3Nacos\u548CEureka\u7684\u533A\u522B\uFF1Ahttps://blog.csdn.net/weixin_43776652/article/details/120874245
# \u6CE8\u518C/\u53D1\u73B0\u4E2D\u5FC3
spring.cloud.nacos.discovery.server-addr=192.168.0.100:8848
spring.cloud.nacos.discovery.namespace=
spring.cloud.nacos.discovery.group=
#true\u5373\u4E3A\u4E34\u65F6\u8282\u70B9\uFF0C\u90A3\u4E48Naocs\u96C6\u7FA4\u5BF9\u8FD9\u4E2Aclient\u8282\u70B9\u6548\u679C\u5C31\u662FAP\uFF0C\u53CD\u4E4B\u5219\u662FCP\uFF0C\u5373\u4E0D\u662F\u4E34\u65F6\u8282\u70B9
spring.cloud.nacos.discovery.ephemeral=false
# \u914D\u7F6E\u4E2D\u5FC3\u2014\u2014\u52A8\u6001\u914D\u7F6E\u670D\u52A1
spring.cloud.nacos.config.server-addr=192.168.0.100:8848

# Config Type: properties(Default Value) \ yaml \ yml
spring.cloud.nacos.config.file-extension=properties

# Map Nacos Config: example.properties

# Create the config Of nacos firstly?you can use one of the following two methods:
## Create Config By OpenAPI
### Create Config By OpenAPI
# curl -X POST 'http://127.0.0.1:8848/nacos/v1/cs/configs' -d 'dataId=example.properties&group=DEFAULT_GROUP&content=useLocalCache=true'
### Get Config By OpenAPI
# curl -X GET 'http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=example.properties&group=DEFAULT_GROUP'

## Create Config By Console
### Login the console of Nacos: http://127.0.0.1:8848/nacos/index.html , then create config:
### Data ID: example.properties
### Group: DEFAULT_GROUP
### Content: useLocalCache=true